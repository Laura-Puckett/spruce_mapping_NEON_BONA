return(rpt)
}
)),
"WS_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$veloXaxsYaxsErth$mean,
"WS_MAX_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$veloXaxsYaxsErth$max,
"WD_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$angZaxsErth$mean,
"T_SONIC" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$tempSoni$mean,
"T_SONIC_SIGMA" = base::sqrt(dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$tempSoni$mean)
, stringsAsFactors = FALSE)
})
names(dataListFlux) <- names(dataList)
dataDfFlux <- do.call(rbind.data.frame,dataListFlux)
rm(list=c("dataListFlux","dataList"))
gc()
timeRglr <- eddy4R.base::def.rglr(timeMeas = as.POSIXlt(dataDfFlux$TIMESTAMP_START), dataMeas = dataDfFlux, BgnRglr = as.POSIXlt(dataDfFlux$TIMESTAMP_START[1]), EndRglr = as.POSIXlt(dataDfFlux$TIMESTAMP_END[length(dataDfFlux$TIMESTAMP_END)]), TzRglr = "UTC", FreqRglr = 1/(60*30))
install.packages('eddy4.base')
install.packages'eddy4R'
install.packages('eddy4R')
library(faraway)
lmod <- lm(lpsa ~ lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=prostate)
#(i)
confint(lmod, level = 0.9)
#(ii)
confint(lmod, level = 0.95)
(sgexp.df<- data.frame(score=c(66, 77, 88,
51, 60, 62, 70),
guide=c(0,0,0,
1,1,1,1)))
lmod2 = lm(score ~ guide, sgexp.df)
anova(lmod2)
#(i)
confint(lmod2, level = 0.9)
#(ii)
confint(lmod2, level = 0.95)
## Group A subjects (i indices)
groupAsubjects<- gtools::combinations(7,3)
## Group B subjects (i indices)
groupBsubjects<- t(apply(groupAsubjects, 1,
FUN=function(y) setdiff(x=1:7, y=y)))
## Put them together
(groupsubjects<- cbind(groupAsubjects, groupBsubjects))
sgexp.df[groupsubjects]
sgexp.df[groupsubjects[1,]]
groupsubjects[1,]
total_points =
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
## Enter the number of possible points (ptspossible) and your rubric scores
## for three categories to get the points earned for a problem.  (Add points
## earned for all problems and report this along with the percentage of the
## total possible points for the assignment.)
RubricScore<- function(ptspossible=NULL,
content=c("excellent","very good",
"good","fair","poor","unacceptable"),
organization=c("excellent","very good",
"good","fair","poor","unacceptable"),
grammar=c("excellent","very good","good",
"fair","poor","unacceptable"))
{
content<- match.arg(content)
organization<- match.arg(organization)
grammar<- match.arg(grammar)
achievement=c(1,0.9,0.8,0.7,0.6,0)
names(achievement)<- c("excellent","very good","good","fair","poor","unacceptable")
criteria<- c(0.8,0.1,0.1)
names(criteria)<- c("content","organization","grammar")
scores<- achievement[c(content,organization,grammar)] * criteria
names(scores)<- names(criteria)
list("Achievement Scores"=achievement,
"Criteria Weights"=criteria,
"Criteria Weighted Acheivement Scores"=scores,
"Weighted Rubric Score"=sum(scores),
"Points Earned"=ptspossible*sum(scores))
} ## end RubricScore
## E.g.  A problem worth 15 total possible points with an ahievment of
## "very good", "excellent", and "good" for criteria "content",
## "organization", and "grammar", respectively:
(prob1a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1b<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1c<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1e<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1f<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1g<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hi<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hii<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiii<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiv<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1i<- RubricScore(pts=10, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2b<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2c<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2d<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3a<- RubricScore(pts=5, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3b<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3c<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3f<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3g<- RubricScore(pts=8, content="e", organization="e", grammar="e")$`Points Earned`)
total_points =
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
(percentage = your_points/total_points*100)
total_points =
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
your_points
## Enter the number of possible points (ptspossible) and your rubric scores
## for three categories to get the points earned for a problem.  (Add points
## earned for all problems and report this along with the percentage of the
## total possible points for the assignment.)
RubricScore<- function(ptspossible=NULL,
content=c("excellent","very good",
"good","fair","poor","unacceptable"),
organization=c("excellent","very good",
"good","fair","poor","unacceptable"),
grammar=c("excellent","very good","good",
"fair","poor","unacceptable"))
{
content<- match.arg(content)
organization<- match.arg(organization)
grammar<- match.arg(grammar)
achievement=c(1,0.9,0.8,0.7,0.6,0)
names(achievement)<- c("excellent","very good","good","fair","poor","unacceptable")
criteria<- c(0.8,0.1,0.1)
names(criteria)<- c("content","organization","grammar")
scores<- achievement[c(content,organization,grammar)] * criteria
names(scores)<- names(criteria)
list("Achievement Scores"=achievement,
"Criteria Weights"=criteria,
"Criteria Weighted Acheivement Scores"=scores,
"Weighted Rubric Score"=sum(scores),
"Points Earned"=ptspossible*sum(scores))
} ## end RubricScore
## E.g.  A problem worth 15 total possible points with an ahievment of
## "very good", "excellent", and "good" for criteria "content",
## "organization", and "grammar", respectively:
(prob1a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1b<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1c<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1e<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1f<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1g<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hi<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hii<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiii<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiv<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1i<- RubricScore(pts=10, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2b<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2c<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2d<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3a<- RubricScore(pts=5, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3b<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3c<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3f<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3g<- RubricScore(pts=8, content="e", organization="e", grammar="e")$`Points Earned`)
total_points = 95
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
(percentage = your_points/total_points*100)
RubricScore<- function(ptspossible=NULL,
content=c("excellent","very good",
"good","fair","poor","unacceptable"),
organization=c("excellent","very good",
"good","fair","poor","unacceptable"),
grammar=c("excellent","very good","good",
"fair","poor","unacceptable"))
{
content<- match.arg(content)
organization<- match.arg(organization)
grammar<- match.arg(grammar)
achievement=c(1,0.9,0.8,0.7,0.6,0)
names(achievement)<- c("excellent","very good","good","fair","poor","unacceptable")
criteria<- c(0.8,0.1,0.1)
names(criteria)<- c("content","organization","grammar")
scores<- achievement[c(content,organization,grammar)] * criteria
names(scores)<- names(criteria)
list("Achievement Scores"=achievement,
"Criteria Weights"=criteria,
"Criteria Weighted Acheivement Scores"=scores,
"Weighted Rubric Score"=sum(scores),
"Points Earned"=ptspossible*sum(scores))
} ## end RubricScore
## E.g.  A problem worth 15 total possible points with an ahievment of
## "very good", "excellent", and "good" for criteria "content",
## "organization", and "grammar", respectively:
(prob1a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1b<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1c<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1e<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1f<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1g<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hi<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hii<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiii<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiv<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1i<- RubricScore(pts=10, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2b<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2c<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2d<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3a<- RubricScore(pts=5, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3b<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3c<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3f<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3g<- RubricScore(pts=8, content="e", organization="e", grammar="e")$`Points Earned`)
# Overall, nice work! Your numeric answers and explanations generally fit with the rubric.
total_points = 95
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
(percentage = your_points/total_points*100)
prob3a
RubricScore<- function(ptspossible=NULL,
content=c("excellent","very good",
"good","fair","poor","unacceptable"),
organization=c("excellent","very good",
"good","fair","poor","unacceptable"),
grammar=c("excellent","very good","good",
"fair","poor","unacceptable"))
{
content<- match.arg(content)
organization<- match.arg(organization)
grammar<- match.arg(grammar)
achievement=c(1,0.9,0.8,0.7,0.6,0)
names(achievement)<- c("excellent","very good","good","fair","poor","unacceptable")
criteria<- c(0.8,0.1,0.1)
names(criteria)<- c("content","organization","grammar")
scores<- achievement[c(content,organization,grammar)] * criteria
names(scores)<- names(criteria)
list("Achievement Scores"=achievement,
"Criteria Weights"=criteria,
"Criteria Weighted Acheivement Scores"=scores,
"Weighted Rubric Score"=sum(scores),
"Points Earned"=ptspossible*sum(scores))
} ## end RubricScore
## E.g.  A problem worth 15 total possible points with an ahievment of
## "very good", "excellent", and "good" for criteria "content",
## "organization", and "grammar", respectively:
(prob1a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1b<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1c<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1e<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1f<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1g<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hi<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hii<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiii<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1hiv<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob1i<- RubricScore(pts=10, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2a<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2b<- RubricScore(pts=3, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2c<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2d<- RubricScore(pts=4, content="e", organization="e", grammar="e")$`Points Earned`)
(prob2e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3a<- RubricScore(pts=5, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3b<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3c<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3d<- RubricScore(pts=2, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3e<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3f<- RubricScore(pts=6, content="e", organization="e", grammar="e")$`Points Earned`)
(prob3g<- RubricScore(pts=8, content="e", organization="e", grammar="e")$`Points Earned`)
# Overall, nice work! Your numeric answers and explanations generally fit with the rubric.
total_points = 95
(your_points = sum(prob1a, prob1b, prob1c, prob1d, prob1e, prob1f, prob1g, prob1hi,
prob1hii, prob1hiii, prob1hiv, prob1i,
prob2a, prob2b, prob2c, prob2d, prob2e,
prob3a, prob3b, prob3c, prob3d, prob3e, prob3f, prob3g))
(percentage = your_points/total_points*100)
setwd("~/research")
LVIS_overlap_path = './datasets/lidar/LVIS/LVIS_and_NEON_BONA/facility_2019_near_field.csv'
#################################################################
### sort by species
#################################################################
LVIS_overlap = read.csv(LVIS_overlap_path)
setwd("~/research/datasets")
#################################################################
#### read NEON data
#################################################################
# veglist = loadByProduct(dpID="DP1.10098.001",
#                         site = "BONA",
#                         package = "basic",
#                         check.size = F,
#                         token = NEON_TOKEN)
#saveRDS(veglist, "./biomass/NEON/BONA/veglist.rds")
readRDS('./biomass/NEON/BONA/veglist.rds')
#################################################################
#### read NEON data
#################################################################
# veglist = loadByProduct(dpID="DP1.10098.001",
#                         site = "BONA",
#                         package = "basic",
#                         check.size = F,
#                         token = NEON_TOKEN)
#saveRDS(veglist, "./biomass/NEON/BONA/veglist.rds")
veglist = readRDS("./biomass/NEON/BONA/veglist.rds")
vegmap = getLocTOS(veglist$vst_mappingandtagging, "vst_mappingandtagging")
veg = merge(veglist$vst_apparentindividual, vegmap,
by = c("individualID", "namedLocation",
"domainID", "siteID", "plotID")) %>%
filter(is.na(adjDecimalLongitude) == F)
veg_spdf = SpatialPointsDataFrame(coords = cbind(veg$adjDecimalLongitude, veg$adjDecimalLatitude),
veg,
proj4string = LVIS_crs)
veg_spdf = spTransform(veg_spdf, above_crs)
library(rgeos)
library(raster)
library(rgdal)
library(dplyr)
library(sp)
above_crs =  sp::CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
vegmap = getLocTOS(veglist$vst_mappingandtagging, "vst_mappingandtagging")
library(neonUtilities)
vegmap = getLocTOS(veglist$vst_mappingandtagging, "vst_mappingandtagging")
library(geoNEON)
vegmap = getLocTOS(veglist$vst_mappingandtagging, "vst_mappingandtagging")
veg = merge(veglist$vst_apparentindividual, vegmap,
by = c("individualID", "namedLocation",
"domainID", "siteID", "plotID")) %>%
filter(is.na(adjDecimalLongitude) == F)
veg_spdf = SpatialPointsDataFrame(coords = cbind(veg$adjDecimalLongitude, veg$adjDecimalLatitude),
veg,
proj4string = LVIS_crs)
LVIS_crs = sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
vegmap = getLocTOS(veglist$vst_mappingandtagging, "vst_mappingandtagging")
veg_spdf = SpatialPointsDataFrame(coords = cbind(veg$adjDecimalLongitude, veg$adjDecimalLatitude),
veg,
proj4string = sp::crs("+init=epsg:4326"))
veg_spdf = SpatialPointsDataFrame(coords = cbind(veg$adjDecimalLongitude, veg$adjDecimalLatitude),
veg,
proj4string = sp::CRS("+init=epsg:4326"))
veg_spdf = spTransform(veg_spdf, above_crs)
writeOGR(obj = veg_spdf,
dsn = './lidar/LVIS/LVIS_and_NEON_BONA/1b_NEON_veg_shp/1b_NEON_veg_shp',
driver = 'ESRI Shapefile',
layer = 'NEON_BONA_veg'
overwrite_layer = T)
writeOGR(obj = veg_spdf,
dsn = './lidar/LVIS/LVIS_and_NEON_BONA/1b_NEON_veg_shp/1b_NEON_veg_shp',
driver = 'ESRI Shapefile',
layer = 'NEON_BONA_veg',
overwrite_layer = T)
LVIS_overlap_path = './lidar/LVIS/LVIS_and_NEON_BONA/1_facility_2019_near_field.csv'
#################################################################
### sort by species
#################################################################
LVIS_overlap = read.csv(LVIS_overlap_path)
plot_species_summary = veg %>%
group_by(plotID, scientificName ) %>%
mutate(BA = 3.24*(stemDiameter/2)^2) %>%
summarize(BA = sum(BA, na.rm=T)) %>%
ungroup()
plot_summary = veg %>%
group_by(plotID) %>%
mutate(BA = 3.24*(stemDiameter/2)^2) %>%
summarize(plot_BA = sum(BA, na.rm = T))
sp_summary = full_join(plot_species_summary, plot_summary) %>%
mutate(sp_prop = BA/plot_BA*100)
sp_summary = sp_summary %>% filter(sp_prop>90)
NEON_subset = NEON_sites[NEON_sites$plotID %in% sp_summary$plotID,]
#####################################################################
LVIS_overlap = read.csv(paste0(output_dir, sensor, '_near_field.csv'))
LVIS_overlap =  LVIS_overlap[LVIS_overlap$plotID %in% sp_summary$plotID,]
subset = LVIS_overlap %>% filter(RH100>2) # filter for trees
subset = subset %>% left_join(sp_summary, by = "plotID")
profile = tidyr::gather(subset, key = "RH", value = "value",
RH10, RH15, RH20, RH25, RH30, RH35, RH40,
RH45, RH50, RH55, RH60, RH65, RH70, RH75,
RH80, RH85, RH90, RH95, RH96, RH97, RH98, RH99, RH100) %>%
mutate(RH = str_remove(RH, "RH")) %>%
mutate(RH = ifelse(RH == "ZG", 0, RH)) %>%
mutate(RH = as.numeric(RH))   %>%
group_by(SHOTNUMBER) %>%
mutate(rel_value = value/max(value)) %>%
ungroup()
library(stringr)
#####################################################################
LVIS_overlap = read.csv(paste0(output_dir, sensor, '_near_field.csv'))
LVIS_overlap =  LVIS_overlap[LVIS_overlap$plotID %in% sp_summary$plotID,]
subset = LVIS_overlap %>% filter(RH100>2) # filter for trees
subset = subset %>% left_join(sp_summary, by = "plotID")
profile = tidyr::gather(subset, key = "RH", value = "value",
RH10, RH15, RH20, RH25, RH30, RH35, RH40,
RH45, RH50, RH55, RH60, RH65, RH70, RH75,
RH80, RH85, RH90, RH95, RH96, RH97, RH98, RH99, RH100) %>%
mutate(RH = str_remove(RH, "RH")) %>%
mutate(RH = ifelse(RH == "ZG", 0, RH)) %>%
mutate(RH = as.numeric(RH))   %>%
group_by(SHOTNUMBER) %>%
mutate(rel_value = value/max(value)) %>%
ungroup()
profile = filter(profile, value < 1000)
ggplot(profile,
alpha = 0.5) +
# facet_grid(cols = vars(BA)) +
geom_line(aes(x = rel_value, y = RH, group = SHOTNUMBER, color = scientificName))
library(stringr); library(ggplot2)
#####################################################################
LVIS_overlap = read.csv(paste0(output_dir, sensor, '_near_field.csv'))
LVIS_overlap =  LVIS_overlap[LVIS_overlap$plotID %in% sp_summary$plotID,]
subset = LVIS_overlap %>% filter(RH100>2) # filter for trees
subset = subset %>% left_join(sp_summary, by = "plotID")
profile = tidyr::gather(subset, key = "RH", value = "value",
RH10, RH15, RH20, RH25, RH30, RH35, RH40,
RH45, RH50, RH55, RH60, RH65, RH70, RH75,
RH80, RH85, RH90, RH95, RH96, RH97, RH98, RH99, RH100) %>%
mutate(RH = str_remove(RH, "RH")) %>%
mutate(RH = ifelse(RH == "ZG", 0, RH)) %>%
mutate(RH = as.numeric(RH))   %>%
group_by(SHOTNUMBER) %>%
mutate(rel_value = value/max(value)) %>%
ungroup()
profile = filter(profile, value < 1000)
ggplot(profile,
alpha = 0.5) +
# facet_grid(cols = vars(BA)) +
geom_line(aes(x = rel_value, y = RH, group = SHOTNUMBER, color = scientificName))
profile_data_NEON = profile
ggplot(profile,
alpha = 0.5) +
# facet_grid(cols = vars(BA)) +
geom_line(aes(x = rel_value, y = RH, group = SHOTNUMBER, color = scientificName))
ggplot(profile,
alpha = 0.5) +
# facet_grid(cols = vars(BA)) +
geom_line(aes(x = rel_value, y = RH, group = SHOTNUMBER, color = scientificName, alpha = BA))
write.csv(profile, output_path)
output_path = './lidar/LVIS/LVIS_and_NEON_BONA/2_profile_data.csv'
write.csv(profile, output_path)
read.csv(LVIS_overlap_path)
plot_species_summary = veg %>%
group_by(plotID, scientificName )
veg %>%
group_by(plotID) %>%
mutate(BA = 3.24*(stemDiameter/2)^2) %>%
summarize(plot_BA = sum(BA, na.rm = T))
read.csv(LVIS_overlap_path)
plot_species_summary = veg %>%
group_by(plotID
)
#####################################################################
LVIS_overlap = read.csv(paste0(output_dir, sensor, '_near_field.csv'))
#####################################################################
LVIS_overlap = read.csv('./lidar/LVIS/LVIS_and_NEON_BONA/1_facility_2019_near_field.csv'))
#####################################################################
LVIS_overlap = read.csv('./lidar/LVIS/LVIS_and_NEON_BONA/1_facility_2019_near_field.csv')
LVIS_overlap =  LVIS_overlap[LVIS_overlap$plotID %in% sp_summary$plotID,]
subset = LVIS_overlap %>% filter(RH100>2) # filter for trees
subset = subset %>% left_join(sp_summary, by = "plotID")
profile = tidyr::gather(subset, key = "RH", value = "value",
RH10, RH15, RH20, RH25, RH30, RH35, RH40,
RH45, RH50, RH55, RH60, RH65, RH70, RH75,
RH80, RH85, RH90, RH95, RH96, RH97, RH98, RH99, RH100) %>%
mutate(RH = str_remove(RH, "RH")) %>%
mutate(RH = ifelse(RH == "ZG", 0, RH)) %>%
mutate(RH = as.numeric(RH))   %>%
group_by(SHOTNUMBER) %>%
mutate(rel_value = value/max(value)) %>%
ungroup()
profile = filter(profile, value < 1000)
ggplot(profile,
alpha = 0.5) +
# facet_grid(cols = vars(BA)) +
geom_line(aes(x = rel_value, y = RH, group = SHOTNUMBER,
# color = scientificName,
color = plotID,
alpha = BA))
subset
subset$plotID %>% unique()
#################################################################
#### read NEON data
#################################################################
NEON_sites = readOGR('./NEON/NEON_TOS_Plot_Polygons_view-shp/NEON_TOS_Plot_Polygons_view.shp')
#################################################################
#### read NEON data
#################################################################
NEON_sites = readOGR('./biomass/NEON/NEON_TOS_Plot_Polygons_view-shp/NEON_TOS_Plot_Polygons_view.shp')
siteName = "DEJU"
NEON_sites = NEON_sites[NEON_sites@data$siteID == siteName & NEON_sites@data$subtype == "basePlot",]
NEON_sites
setwd("~/research/datasets/NEON/BONA")
library(neonUtilities);
source('C:/Users/lkp58/Documents/research/tokens/neon_token.R')
site = "BONA"
site = "BONA"
year = "2019"
byFileAOP("DP1.30003.001", site=site, year=year, check.size = F,
savepath="./")
# Hyperspectral Data
byFileAOP("DP3.30006.001", site=site, year=year, check.size = F,
savepath="./")
